{
  "address": "0xB53927CC94A93fE707a63a6174b29b049a38E85b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumStakingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EventStaking__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EventStaking__PoolIsFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EventStaking__PoolNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EventStaking__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "StakingState",
          "type": "uint256"
        }
      ],
      "name": "EventStaking__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "StakingEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimumStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_staker",
          "type": "uint256"
        }
      ],
      "name": "getStaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getStakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingState",
      "outputs": [
        {
          "internalType": "enum EventStaking.StakingState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_MinimumStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xebd75eafc4daf77fe9e67b3678560617a62a65e1579b0993bb6646c080e22582",
  "receipt": {
    "to": null,
    "from": "0x2D22F85edFB7fa410F66413bACe078De251fC6a7",
    "contractAddress": "0xB53927CC94A93fE707a63a6174b29b049a38E85b",
    "transactionIndex": 14,
    "gasUsed": "1322786",
    "logsBloom": "0x
    "blockHash": "0x630ca6b1af87f62f1b3d62c801b62a93e5ce37e4a163527c57084f696329e5f4",
    "transactionHash": "0xebd75eafc4daf77fe9e67b3678560617a62a65e1579b0993bb6646c080e22582",
    "logs": [],
    "blockNumber": 8526779,
    "cumulativeGasUsed": "3812503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    30,
    60,
    5,
    "30000000000000000"
  ],
  "numDeployments": 2,
  "solcInputHash": "490f7e6de982feba63939f887e37fd94",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCap\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EventStaking__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EventStaking__PoolIsFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EventStaking__PoolNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EventStaking__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakingState\",\"type\":\"uint256\"}],\"name\":\"EventStaking__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"StakingEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_staker\",\"type\":\"uint256\"}],\"name\":\"getStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingState\",\"outputs\":[{\"internalType\":\"enum EventStaking.StakingState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_MinimumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Roberto Iturralde\",\"details\":\"This contract implements Chainlink Automation\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"Chainlink Automation function that verifies if upkeep is neededWhen Upkeep is needed, it will call performUpkeep\"},\"constructor\":{\"params\":{\"endTime\":\"Time until staking pool becomes unlocked and funds withdrawn\",\"interval\":\"How often should rewards be issued\",\"maxCap\":\"Maximum pool capacity in ETH\",\"minimumStakingAmount\":\"Minimum staking amount in ETH\",\"percentage\":\"Percentage (integer) of rewards distributed\"}},\"performUpkeep(bytes)\":{\"details\":\"Once upkeep is needed, performUpkeep will call rewards functionIf enough time (endTime) has passed, it will call withdraw function\"}},\"title\":\"A Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable and transparent staking smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EventStaking.sol\":\"EventStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"contracts/EventStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror EventStaking__PoolNotOpen();\\nerror EventStaking__NotEnoughEthEntered();\\nerror EventStaking__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 StakingState\\n);\\nerror EventStaking__TransferFailed();\\nerror EventStaking__NotEnoughStakers();\\nerror EventStaking__PoolIsFull();\\n\\n/**\\n * @title A Staking Contract\\n * @author Roberto Iturralde\\n * @notice This contract is for creating an untamperable and transparent staking smart contract\\n * @dev This contract implements Chainlink Automation\\n */\\n\\ncontract EventStaking is KeeperCompatibleInterface {\\n    enum StakingState {\\n        OPEN,\\n        CLOSE,\\n        ENDED\\n    }\\n    enum PoolCap {\\n        OPEN,\\n        FULL\\n    }\\n\\n    StakingState private s_stakingState;\\n    PoolCap private s_poolCap;\\n    address[] public s_stakers;\\n    uint256 public immutable i_MinimumStakingAmount;\\n    mapping(address => uint256) public s_addressToAmountStaked;\\n    uint256 private immutable i_interval;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private s_endStakingTime;\\n    uint256 private s_percentage;\\n    uint256 private s_maxCap;\\n\\n    event StakingEnter(address indexed staker);\\n    event RewardsDistributed(uint256 indexed rewardAmount);\\n    event Withdrawal(address staker, uint256 balance);\\n\\n    /**\\n     * @param minimumStakingAmount Minimum staking amount in ETH\\n     * @param interval How often should rewards be issued\\n     * @param endTime Time until staking pool becomes unlocked and funds withdrawn\\n     * @param percentage Percentage (integer) of rewards distributed\\n     * @param maxCap Maximum pool capacity in ETH\\n     */\\n\\n    constructor(\\n        uint256 minimumStakingAmount,\\n        uint256 interval,\\n        uint256 endTime,\\n        uint256 percentage,\\n        uint256 maxCap\\n    ) payable {\\n        i_MinimumStakingAmount = minimumStakingAmount;\\n        s_stakingState = StakingState.OPEN;\\n        i_interval = interval;\\n        s_lastTimeStamp = block.timestamp;\\n        s_endStakingTime = endTime;\\n        s_percentage = percentage;\\n        s_poolCap = PoolCap.OPEN;\\n        s_maxCap = maxCap;\\n    }\\n\\n    function enterPool() public payable {\\n        if (msg.value < i_MinimumStakingAmount) {\\n            revert EventStaking__NotEnoughEthEntered();\\n        }\\n        if (s_poolCap == PoolCap.FULL) {\\n            revert EventStaking__PoolIsFull();\\n        }\\n        if (s_stakingState != StakingState.OPEN) {\\n            revert EventStaking__PoolNotOpen();\\n        }\\n        if (address(this).balance >= s_maxCap) {\\n            s_stakingState = StakingState.CLOSE;\\n            s_poolCap = PoolCap.FULL;\\n        }\\n        s_stakers.push(msg.sender);\\n        s_addressToAmountStaked[msg.sender] += msg.value;\\n        emit StakingEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Chainlink Automation function that verifies if upkeep is needed\\n     * @dev When Upkeep is needed, it will call performUpkeep\\n     */\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData */\\n    ) public override returns (bool upkeepNeeded, bytes memory /*performData */) {\\n        if (\\n            (block.timestamp - s_lastTimeStamp) > i_interval && s_stakingState != StakingState.ENDED\\n        ) {\\n            s_stakingState = StakingState.OPEN;\\n        }\\n        bool isOpen = (StakingState.OPEN == s_stakingState);\\n        bool hasStakers = (s_stakers.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        upkeepNeeded = (isOpen && hasStakers && hasBalance && timePassed);\\n    }\\n\\n    /**\\n     * @dev Once upkeep is needed, performUpkeep will call rewards function\\n     * @dev If enough time (endTime) has passed, it will call withdraw function\\n     */\\n    function performUpkeep(bytes calldata /*performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert EventStaking__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_stakers.length,\\n                uint256(s_stakingState)\\n            );\\n        }\\n        if ((block.timestamp - s_lastTimeStamp) > s_endStakingTime) {\\n            withdraw();\\n        }\\n        s_stakingState = StakingState.CLOSE;\\n        rewards(s_percentage);\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    function rewards(uint256 percentage) internal {\\n        uint256 i;\\n        for (i = 0; i < s_stakers.length; i++) {\\n            address staker = s_stakers[i];\\n            uint256 rewardAmount = (s_addressToAmountStaked[staker] * percentage) / 100;\\n            s_addressToAmountStaked[staker] += rewardAmount;\\n            emit RewardsDistributed(rewardAmount);\\n        }\\n    }\\n\\n    function withdraw() internal {\\n        uint256 i;\\n        for (i = 0; i < s_stakers.length; i++) {\\n            address staker = s_stakers[i];\\n            uint256 amount = s_addressToAmountStaked[staker];\\n            (bool callSuccess, ) = payable(staker).call{value: amount}(\\\"\\\");\\n            if (!callSuccess) {\\n                revert EventStaking__TransferFailed();\\n            }\\n            emit Withdrawal(staker, amount);\\n            delete s_stakers[i];\\n            s_addressToAmountStaked[staker] = 0;\\n        }\\n        s_stakingState = StakingState.ENDED;\\n    }\\n\\n    function getMinimumStakingAmount() public view returns (uint256) {\\n        return i_MinimumStakingAmount;\\n    }\\n\\n    function getStaker(uint256 _staker) public view returns (address) {\\n        return s_stakers[_staker];\\n    }\\n\\n    function getStakerAmount(address _address) public view returns (uint256) {\\n        return s_addressToAmountStaked[_address];\\n    }\\n\\n    function getStakingState() public view returns (StakingState) {\\n        return s_stakingState;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getEndTime() public view returns (uint256) {\\n        return s_endStakingTime;\\n    }\\n\\n    function getLatestTimestamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getPercentage() public view returns (uint256) {\\n        return s_percentage;\\n    }\\n\\n    function getMaxCap() public view returns (uint256) {\\n        return s_maxCap;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3a6376ec8b543f7b75ec8f7235656646929ffb028af1cc07763bffa0511375\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526040516200173b3803806200173b8339818101604052810190620000299190620000fa565b846080818152505060008060006101000a81548160ff0219169083600281111562000059576200005862000182565b5b02179055508360a0818152505042600381905550826004819055508160058190555060008060016101000a81548160ff02191690836001811115620000a357620000a262000182565b5b0217905550806006819055505050505050620001b1565b600080fd5b6000819050919050565b620000d481620000bf565b8114620000e057600080fd5b50565b600081519050620000f481620000c9565b92915050565b600080600080600060a08688031215620001195762000118620000ba565b5b60006200012988828901620000e3565b95505060206200013c88828901620000e3565b94505060406200014f88828901620000e3565b93505060606200016288828901620000e3565b92505060806200017588828901620000e3565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a051611548620001f3600039600081816107790152818161086501526108e40152600081816103ce015281816104e601526108be01526115486000f3fe6080604052600436106100e85760003560e01c8063795d27111161008a578063c920920811610059578063c9209208146102c8578063e3c998fe14610305578063e86d059e14610342578063f43b52cb1461037f576100e8565b8063795d27111461020a57806391ad27b414610235578063c2e6127f14610260578063c7352ede1461029d576100e8565b8063439f5ac2116100c6578063439f5ac21461016e5780634585e33b1461019957806350a3bd39146101c25780636e04ff0d146101cc576100e8565b80630b2accb2146100ed57806338f059b91461011857806342a2394514610143575b600080fd5b3480156100f957600080fd5b506101026103aa565b60405161010f9190610da3565b60405180910390f35b34801561012457600080fd5b5061012d6103b4565b60405161013a9190610e35565b60405180910390f35b34801561014f57600080fd5b506101586103ca565b6040516101659190610da3565b60405180910390f35b34801561017a57600080fd5b506101836103f2565b6040516101909190610da3565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb9190610ec9565b6103fc565b005b6101ca6104e4565b005b3480156101d857600080fd5b506101f360048036038101906101ee9190611057565b610773565b604051610201929190611143565b60405180910390f35b34801561021657600080fd5b5061021f6108bc565b60405161022c9190610da3565b60405180910390f35b34801561024157600080fd5b5061024a6108e0565b6040516102579190610da3565b60405180910390f35b34801561026c57600080fd5b50610287600480360381019061028291906111d1565b610908565b6040516102949190610da3565b60405180910390f35b3480156102a957600080fd5b506102b2610920565b6040516102bf9190610da3565b60405180910390f35b3480156102d457600080fd5b506102ef60048036038101906102ea919061122a565b61092a565b6040516102fc9190611266565b60405180910390f35b34801561031157600080fd5b5061032c6004803603810190610327919061122a565b610969565b6040516103399190611266565b60405180910390f35b34801561034e57600080fd5b50610369600480360381019061036491906111d1565b6109b1565b6040516103769190610da3565b60405180910390f35b34801561038b57600080fd5b506103946109fa565b6040516103a19190610da3565b60405180910390f35b6000600554905090565b60008060009054906101000a900460ff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600454905090565b600061041660405180602001604052806000815250610773565b50905080610483574760018054905060008054906101000a900460ff16600281111561044557610444610dbe565b5b6040517fb772065d00000000000000000000000000000000000000000000000000000000815260040161047a93929190611281565b60405180910390fd5b6004546003544261049491906112e7565b11156104a3576104a2610a04565b5b60016000806101000a81548160ff021916908360028111156104c8576104c7610dbe565b5b02179055506104d8600554610c40565b42600381905550505050565b7f000000000000000000000000000000000000000000000000000000000000000034101561053e576040517f10085d9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018081111561055157610550610dbe565b5b600060019054906101000a900460ff16600181111561057357610572610dbe565b5b14156105ab576040517f3c8dce5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156105bf576105be610dbe565b5b60008054906101000a900460ff1660028111156105df576105de610dbe565b5b14610616576040517f5d6faa8000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065447106106755760016000806101000a81548160ff0219169083600281111561064457610643610dbe565b5b02179055506001600060016101000a81548160ff0219169083600181111561066f5761066e610dbe565b5b02179055505b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610727919061131b565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f8e8b75eee87436b3e18db471a188f1e41a5098dab61bc1deba2af29544801ab860405160405180910390a2565b600060607f0000000000000000000000000000000000000000000000000000000000000000600354426107a691906112e7565b1180156107e457506002808111156107c1576107c0610dbe565b5b60008054906101000a900460ff1660028111156107e1576107e0610dbe565b5b14155b156108145760008060006101000a81548160ff0219169083600281111561080e5761080d610dbe565b5b02179055505b60008060009054906101000a900460ff16600281111561083757610836610dbe565b5b6000600281111561084b5761084a610dbe565b5b1490506000806001805490501190506000804711905060007f00000000000000000000000000000000000000000000000000000000000000006003544261089291906112e7565b11905083801561089f5750825b80156108a85750815b80156108b15750805b955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60026020528060005260406000206000915090505481565b6000600654905090565b6001818154811061093a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001828154811061097f5761097e611371565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600354905090565b60005b600180549050811015610c1357600060018281548110610a2a57610a29611371565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008273ffffffffffffffffffffffffffffffffffffffff1682604051610ac1906113d1565b60006040518083038185875af1925050503d8060008114610afe576040519150601f19603f3d011682016040523d82523d6000602084013e610b03565b606091505b5050905080610b3e576040517f17bd8d3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658383604051610b6f9291906113e6565b60405180910390a160018481548110610b8b57610b8a611371565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080610c0b9061140f565b915050610a07565b60026000806101000a81548160ff02191690836002811115610c3857610c37610dbe565b5b021790555050565b60005b600180549050811015610d8657600060018281548110610c6657610c65611371565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000606484600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ce29190611458565b610cec91906114e1565b905080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d3d919061131b565b92505081905550807f6d1c76d614228b523baa4dcd9539e2c713b54ff4ab3ff2d1627e7f6cd32be44260405160405180910390a250508080610d7e9061140f565b915050610c43565b5050565b6000819050919050565b610d9d81610d8a565b82525050565b6000602082019050610db86000830184610d94565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610dfe57610dfd610dbe565b5b50565b6000819050610e0f82610ded565b919050565b6000610e1f82610e01565b9050919050565b610e2f81610e14565b82525050565b6000602082019050610e4a6000830184610e26565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610e8957610e88610e64565b5b8235905067ffffffffffffffff811115610ea657610ea5610e69565b5b602083019150836001820283011115610ec257610ec1610e6e565b5b9250929050565b60008060208385031215610ee057610edf610e5a565b5b600083013567ffffffffffffffff811115610efe57610efd610e5f565b5b610f0a85828601610e73565b92509250509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f6482610f1b565b810181811067ffffffffffffffff82111715610f8357610f82610f2c565b5b80604052505050565b6000610f96610e50565b9050610fa28282610f5b565b919050565b600067ffffffffffffffff821115610fc257610fc1610f2c565b5b610fcb82610f1b565b9050602081019050919050565b82818337600083830152505050565b6000610ffa610ff584610fa7565b610f8c565b90508281526020810184848401111561101657611015610f16565b5b611021848285610fd8565b509392505050565b600082601f83011261103e5761103d610e64565b5b813561104e848260208601610fe7565b91505092915050565b60006020828403121561106d5761106c610e5a565b5b600082013567ffffffffffffffff81111561108b5761108a610e5f565b5b61109784828501611029565b91505092915050565b60008115159050919050565b6110b5816110a0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f55780820151818401526020810190506110da565b83811115611104576000848401525b50505050565b6000611115826110bb565b61111f81856110c6565b935061112f8185602086016110d7565b61113881610f1b565b840191505092915050565b600060408201905061115860008301856110ac565b818103602083015261116a818461110a565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061119e82611173565b9050919050565b6111ae81611193565b81146111b957600080fd5b50565b6000813590506111cb816111a5565b92915050565b6000602082840312156111e7576111e6610e5a565b5b60006111f5848285016111bc565b91505092915050565b61120781610d8a565b811461121257600080fd5b50565b600081359050611224816111fe565b92915050565b6000602082840312156112405761123f610e5a565b5b600061124e84828501611215565b91505092915050565b61126081611193565b82525050565b600060208201905061127b6000830184611257565b92915050565b60006060820190506112966000830186610d94565b6112a36020830185610d94565b6112b06040830184610d94565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112f282610d8a565b91506112fd83610d8a565b9250828210156113105761130f6112b8565b5b828203905092915050565b600061132682610d8a565b915061133183610d8a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611366576113656112b8565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b60006113bb6000836113a0565b91506113c6826113ab565b600082019050919050565b60006113dc826113ae565b9150819050919050565b60006040820190506113fb6000830185611257565b6114086020830184610d94565b9392505050565b600061141a82610d8a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561144d5761144c6112b8565b5b600182019050919050565b600061146382610d8a565b915061146e83610d8a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114a7576114a66112b8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ec82610d8a565b91506114f783610d8a565b925082611507576115066114b2565b5b82820490509291505056fea26469706673582212207ce2c9df47dc3faec7fa310b67e2f49a7d6f5bc299d1f1caba9d1b1063dd604364736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Roberto Iturralde",
    "details": "This contract implements Chainlink Automation",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "Chainlink Automation function that verifies if upkeep is neededWhen Upkeep is needed, it will call performUpkeep"
      },
      "constructor": {
        "params": {
          "endTime": "Time until staking pool becomes unlocked and funds withdrawn",
          "interval": "How often should rewards be issued",
          "maxCap": "Maximum pool capacity in ETH",
          "minimumStakingAmount": "Minimum staking amount in ETH",
          "percentage": "Percentage (integer) of rewards distributed"
        }
      },
      "performUpkeep(bytes)": {
        "details": "Once upkeep is needed, performUpkeep will call rewards functionIf enough time (endTime) has passed, it will call withdraw function"
      }
    },
    "title": "A Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable and transparent staking smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/EventStaking.sol:EventStaking",
        "label": "s_stakingState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(StakingState)50"
      },
      {
        "astId": 59,
        "contract": "contracts/EventStaking.sol:EventStaking",
        "label": "s_poolCap",
        "offset": 1,
        "slot": "0",
        "type": "t_enum(PoolCap)53"
      },
      {
        "astId": 62,
        "contract": "contracts/EventStaking.sol:EventStaking",
        "label": "s_stakers",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/EventStaking.sol:EventStaking",
        "label": "s_addressToAmountStaked",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/EventStaking.sol:EventStaking",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 74,
        "contract": "contracts/EventStaking.sol:EventStaking",
        "label": "s_endStakingTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 76,
        "contract": "contracts/EventStaking.sol:EventStaking",
        "label": "s_percentage",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 78,
        "contract": "contracts/EventStaking.sol:EventStaking",
        "label": "s_maxCap",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(PoolCap)53": {
        "encoding": "inplace",
        "label": "enum EventStaking.PoolCap",
        "numberOfBytes": "1"
      },
      "t_enum(StakingState)50": {
        "encoding": "inplace",
        "label": "enum EventStaking.StakingState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}