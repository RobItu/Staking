{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"
    },
    "contracts/EventStaking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\nerror EventStaking__PoolNotOpen();\nerror EventStaking__NotEnoughEthEntered();\nerror EventStaking__UpkeepNotNeeded(\n    uint256 currentBalance,\n    uint256 numPlayers,\n    uint256 StakingState\n);\nerror EventStaking__TransferFailed();\nerror EventStaking__NotEnoughStakers();\nerror EventStaking__PoolIsFull();\n\n/**\n * @title A Staking Contract\n * @author Roberto Iturralde\n * @notice This contract is for creating an untamperable and transparent staking smart contract\n * @dev This contract implements Chainlink Automation\n */\n\ncontract EventStaking is KeeperCompatibleInterface {\n    enum StakingState {\n        OPEN,\n        CLOSE,\n        ENDED\n    }\n    enum PoolCap {\n        OPEN,\n        FULL\n    }\n\n    StakingState private s_stakingState;\n    PoolCap private s_poolCap;\n    address[] public s_stakers;\n    uint256 public immutable i_MinimumStakingAmount;\n    mapping(address => uint256) public s_addressToAmountStaked;\n    uint256 private immutable i_interval;\n    uint256 private s_lastTimeStamp;\n    uint256 private s_endStakingTime;\n    uint256 private s_percentage;\n    uint256 private s_maxCap;\n\n    event StakingEnter(address indexed staker);\n    event RewardsDistributed(uint256 indexed rewardAmount);\n    event Withdrawal(address staker, uint256 balance);\n\n    /**\n     * @param minimumStakingAmount Minimum staking amount in ETH\n     * @param interval How often should rewards be issued\n     * @param endTime Time until staking pool becomes unlocked and funds withdrawn\n     * @param percentage Percentage (integer) of rewards distributed\n     * @param maxCap Maximum pool capacity in ETH\n     */\n\n    constructor(\n        uint256 minimumStakingAmount,\n        uint256 interval,\n        uint256 endTime,\n        uint256 percentage,\n        uint256 maxCap\n    ) payable {\n        i_MinimumStakingAmount = minimumStakingAmount;\n        s_stakingState = StakingState.OPEN;\n        i_interval = interval;\n        s_lastTimeStamp = block.timestamp;\n        s_endStakingTime = endTime;\n        s_percentage = percentage;\n        s_poolCap = PoolCap.OPEN;\n        s_maxCap = maxCap;\n    }\n\n    function enterPool() public payable {\n        if (msg.value < i_MinimumStakingAmount) {\n            revert EventStaking__NotEnoughEthEntered();\n        }\n        if (s_poolCap == PoolCap.FULL) {\n            revert EventStaking__PoolIsFull();\n        }\n        if (s_stakingState != StakingState.OPEN) {\n            revert EventStaking__PoolNotOpen();\n        }\n        if (address(this).balance >= s_maxCap) {\n            s_stakingState = StakingState.CLOSE;\n            s_poolCap = PoolCap.FULL;\n        }\n        s_stakers.push(msg.sender);\n        s_addressToAmountStaked[msg.sender] += msg.value;\n        emit StakingEnter(msg.sender);\n    }\n\n    /**\n     * @dev Chainlink Automation function that verifies if upkeep is needed\n     * @dev When Upkeep is needed, it will call performUpkeep\n     */\n\n    function checkUpkeep(\n        bytes memory /*checkData */\n    ) public override returns (bool upkeepNeeded, bytes memory /*performData */) {\n        if (\n            (block.timestamp - s_lastTimeStamp) > i_interval && s_stakingState != StakingState.ENDED\n        ) {\n            s_stakingState = StakingState.OPEN;\n        }\n        bool isOpen = (StakingState.OPEN == s_stakingState);\n        bool hasStakers = (s_stakers.length > 0);\n        bool hasBalance = (address(this).balance > 0);\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\n        upkeepNeeded = (isOpen && hasStakers && hasBalance && timePassed);\n    }\n\n    /**\n     * @dev Once upkeep is needed, performUpkeep will call rewards function\n     * @dev If enough time (endTime) has passed, it will call withdraw function\n     */\n    function performUpkeep(bytes calldata /*performData */) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        if (!upkeepNeeded) {\n            revert EventStaking__UpkeepNotNeeded(\n                address(this).balance,\n                s_stakers.length,\n                uint256(s_stakingState)\n            );\n        }\n        if ((block.timestamp - s_lastTimeStamp) > s_endStakingTime) {\n            withdraw();\n        }\n        s_stakingState = StakingState.CLOSE;\n        rewards(s_percentage);\n        s_lastTimeStamp = block.timestamp;\n    }\n\n    function rewards(uint256 percentage) internal {\n        uint256 i;\n        for (i = 0; i < s_stakers.length; i++) {\n            address staker = s_stakers[i];\n            uint256 rewardAmount = (s_addressToAmountStaked[staker] * percentage) / 100;\n            s_addressToAmountStaked[staker] += rewardAmount;\n            emit RewardsDistributed(rewardAmount);\n        }\n    }\n\n    function withdraw() internal {\n        uint256 i;\n        for (i = 0; i < s_stakers.length; i++) {\n            address staker = s_stakers[i];\n            uint256 amount = s_addressToAmountStaked[staker];\n            (bool callSuccess, ) = payable(staker).call{value: amount}(\"\");\n            if (!callSuccess) {\n                revert EventStaking__TransferFailed();\n            }\n            emit Withdrawal(staker, amount);\n            delete s_stakers[i];\n            s_addressToAmountStaked[staker] = 0;\n        }\n        s_stakingState = StakingState.ENDED;\n    }\n\n    function getMinimumStakingAmount() public view returns (uint256) {\n        return i_MinimumStakingAmount;\n    }\n\n    function getStaker(uint256 _staker) public view returns (address) {\n        return s_stakers[_staker];\n    }\n\n    function getStakerAmount(address _address) public view returns (uint256) {\n        return s_addressToAmountStaked[_address];\n    }\n\n    function getStakingState() public view returns (StakingState) {\n        return s_stakingState;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_interval;\n    }\n\n    function getEndTime() public view returns (uint256) {\n        return s_endStakingTime;\n    }\n\n    function getLatestTimestamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getPercentage() public view returns (uint256) {\n        return s_percentage;\n    }\n\n    function getMaxCap() public view returns (uint256) {\n        return s_maxCap;\n    }\n}\n"
    },
    "contracts/tests/TestHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.7;\n\nimport \"../EventStaking.sol\";\n\ncontract TestHelper {\n    EventStaking staking;\n\n    constructor(\n        uint256 minimumStakingAmount,\n        uint256 interval,\n        uint256 endTime,\n        uint256 percentage,\n        uint256 maxCap\n    ) {\n        staking = new EventStaking(minimumStakingAmount, interval, endTime, percentage, maxCap);\n    }\n\n    function fundMe() public payable {}\n\n    function fundContract(uint256 amount) public {\n        staking.enterPool{value: amount}();\n    }\n\n    function withdraw() public {\n        staking.performUpkeep(\"\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}